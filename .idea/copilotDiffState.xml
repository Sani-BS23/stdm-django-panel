<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/todo_project/todos/migrations/0004_remove_student_field.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/todo_project/todos/migrations/0004_remove_student_field.py" />
              <option name="updatedContent" value="# Generated by Django 5.2.4 on 2025-07-25 12:12&#10;&#10;import django.db.models.deletion&#10;from django.db import migrations, models&#10;&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    dependencies = [&#10;        ('student', '0001_initial'),&#10;        ('todos', '0003_todo_student'),&#10;    ]&#10;&#10;    operations = [&#10;        migrations.RemoveField(&#10;            model_name='todo',&#10;            name='student',&#10;        ),&#10;        migrations.AddField(&#10;            model_name='todo',&#10;            name='student',&#10;            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='todos', to='student.student', null=True),&#10;        ),&#10;    ]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/todo_project/todos/serializers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/todo_project/todos/serializers.py" />
              <option name="originalContent" value="from rest_framework import serializers&#10;from .models import Todo&#10;from student.models import Student&#10;&#10;class StudentSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Student&#10;        fields = ['id', 'name', 'email']&#10;&#10;class TodoSerializer(serializers.ModelSerializer):&#10;    student = StudentSerializer(read_only=True)&#10;&#10;    class Meta:&#10;        model = Todo&#10;        fields = ['id', 'title', 'slug', 'content', 'completed', 'created_at', 'updated_at', 'student']&#10;" />
              <option name="updatedContent" value="from rest_framework import serializers&#10;from .models import Todo&#10;from student.models import Student&#10;&#10;class StudentSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Student&#10;        fields = ['id', 'name', 'email']&#10;&#10;class TodoSerializer(serializers.ModelSerializer):&#10;    student = StudentSerializer(read_only=True)&#10;&#10;    class Meta:&#10;        model = Todo&#10;        fields = ['id', 'title', 'slug', 'content', 'completed', 'created_at', 'updated_at', 'student']&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/todo_project/todos/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/todo_project/todos/views.py" />
              <option name="originalContent" value="from http.client import responses&#10;&#10;from django.shortcuts import get_object_or_404&#10;from rest_framework import status&#10;from rest_framework.response import Response&#10;from rest_framework.views import APIView&#10;&#10;from .models import Todo&#10;from student.models import Student&#10;from .serializers import TodoSerializer&#10;&#10;&#10;class TodoList(APIView):&#10;    def get(self, request):&#10;        todos = Todo.objects.all().order_by('created_at')&#10;        serializer = TodoSerializer(todos, many=True)&#10;        return Response({'todos': serializer.data}, status=status.HTTP_200_OK)&#10;&#10;    def post(self, request):&#10;        print(request)&#10;        data = request.data&#10;        title = data.get('title')&#10;        slug = data.get('slug')&#10;        content = data.get('content')&#10;        student_id = data.get('student_id')&#10;&#10;        if not all([title, slug, content, student_id]):&#10;            return Response({'error': 'Missing required fields.'}, status=status.HTTP_400_BAD_REQUEST)&#10;&#10;        student = get_object_or_404(Student, id=student_id)&#10;&#10;        todo = Todo.objects.create(&#10;            title=title,&#10;            slug=slug,&#10;            content=content,&#10;            student=student&#10;        )&#10;&#10;        return Response({&#10;            'message': 'Todo created successfully.',&#10;            'todo': {&#10;                'id': todo.id,&#10;                'title': todo.title,&#10;                'slug': todo.slug,&#10;                'content': todo.content,&#10;                'student': todo.student.name,&#10;                'created_at': todo.created_at,&#10;            }&#10;        }, status=status.HTTP_201_CREATED)&#10;&#10;&#10;class TodoDetails(APIView):&#10;    def get(self, request, pk):&#10;        todo = get_object_or_404(Todo, id=pk)&#10;&#10;        return Response({&#10;            'message': 'Todo retrieved successfully.',&#10;            'todo': TodoSerializer(todo).data&#10;        }, status=status.HTTP_200_OK)&#10;&#10;    def put(self, request, pk):&#10;        todo = get_object_or_404(Todo, id=pk)&#10;        data = request.data&#10;&#10;        print(data)&#10;&#10;        # Check for required fields&#10;        required_fields = ['title', 'slug', 'content', 'student_id']&#10;        if not all(data.get(field) for field in required_fields):&#10;            return Response({'error': 'Missing required fields.'}, status=status.HTTP_400_BAD_REQUEST)&#10;&#10;        # Get student object&#10;        student = get_object_or_404(Student, id=data['student_id'])&#10;&#10;        # Update todo&#10;        todo.title = data['title']&#10;        todo.slug = data['slug']&#10;        todo.content = data['content']&#10;        todo.student = student&#10;        todo.save()&#10;&#10;        return Response({&#10;            'message': 'Todo updated successfully.',&#10;            'todo': TodoSerializer(todo).data&#10;        }, status=status.HTTP_200_OK)&#10;&#10;    def delete(self, request, pk):&#10;        print('Hello delete')&#10;        todo = get_object_or_404(Todo, id=pk)&#10;        print(todo.title)&#10;        todo.delete()&#10;        return Response({'message': 'Todo deleted successfully'}, status=status.HTTP_204_NO_CONTENT)&#10;" />
              <option name="updatedContent" value="from http.client import responses&#10;&#10;from django.shortcuts import get_object_or_404&#10;from rest_framework import status&#10;from rest_framework.response import Response&#10;from rest_framework.views import APIView&#10;&#10;from .models import Todo&#10;from student.models import Student&#10;from .serializers import TodoSerializer&#10;&#10;&#10;class TodoList(APIView):&#10;    def get(self, request):&#10;        todos = Todo.objects.all().order_by('created_at')&#10;        serializer = TodoSerializer(todos, many=True)&#10;        return Response({'todos': serializer.data}, status=status.HTTP_200_OK)&#10;&#10;    def post(self, request):&#10;        print(request)&#10;        data = request.data&#10;        title = data.get('title')&#10;        slug = data.get('slug')&#10;        content = data.get('content')&#10;        student_id = data.get('student_id')&#10;&#10;        if not all([title, slug, content, student_id]):&#10;            return Response({'error': 'Missing required fields.'}, status=status.HTTP_400_BAD_REQUEST)&#10;&#10;        student = get_object_or_404(Student, id=student_id)&#10;&#10;        todo = Todo.objects.create(&#10;            title=title,&#10;            slug=slug,&#10;            content=content,&#10;            student=student&#10;        )&#10;&#10;        return Response({&#10;            'message': 'Todo created successfully.',&#10;            'todo': {&#10;                'id': todo.id,&#10;                'title': todo.title,&#10;                'slug': todo.slug,&#10;                'content': todo.content,&#10;                'student': todo.student.name,&#10;                'created_at': todo.created_at,&#10;            }&#10;        }, status=status.HTTP_201_CREATED)&#10;&#10;&#10;class TodoDetails(APIView):&#10;    def get(self, request, pk):&#10;        todo = get_object_or_404(Todo, id=pk)&#10;&#10;        return Response({&#10;            'message': 'Todo retrieved successfully.',&#10;            'todo': TodoSerializer(todo).data&#10;        }, status=status.HTTP_200_OK)&#10;&#10;    def put(self, request, pk):&#10;        todo = get_object_or_404(Todo, id=pk)&#10;        data = request.data&#10;&#10;        print(data)&#10;&#10;        # Check for required fields&#10;        required_fields = ['title', 'slug', 'content', 'student_id']&#10;        if not all(data.get(field) for field in required_fields):&#10;            return Response({'error': 'Missing required fields.'}, status=status.HTTP_400_BAD_REQUEST)&#10;&#10;        # Get student object&#10;        student = get_object_or_404(Student, id=data['student_id'])&#10;&#10;        # Update todo&#10;        todo.title = data['title']&#10;        todo.slug = data['slug']&#10;        todo.content = data['content']&#10;        todo.student = student&#10;        todo.save()&#10;&#10;        return Response({&#10;            'message': 'Todo updated successfully.',&#10;            'todo': TodoSerializer(todo).data&#10;        }, status=status.HTTP_200_OK)&#10;&#10;    def delete(self, request, pk):&#10;        print('Hello delete')&#10;        todo = get_object_or_404(Todo, id=pk)&#10;        print(todo.title)&#10;        todo.delete()&#10;        return Response({'message': 'Todo deleted successfully'}, status=status.HTTP_204_NO_CONTENT)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>